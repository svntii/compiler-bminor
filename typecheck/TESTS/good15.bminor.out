	Scan Successful
	Parse Successful
	Reformatted Code
gfx_open: function void(width: integer, height: integer, title: string) ;
gfx_point: function void(x: integer, y: integer) ;
gfx_line: function void(x1: integer, y1: integer, x2: integer, y2: integer) ;
gfx_color: function void(red: integer, green: integer, blue: integer) ;
gfx_clear: function void() ;
gfx_clear_color: function void(red: integer, green: integer, blue: integer) ;
gfx_wait: function char() ;
gfx_xpos: function integer() ;
gfx_ypos: function integer() ;
gfx_xsize: function integer() ;
gfx_ysize: function integer() ;
gfx_event_waiting: function boolean() ;
gfx_flush: function integer() ;
usleep: function void(usecs: integer) ;
rand: function integer() ;
draw_box: function void(x: integer, y: integer, size: integer)  = 
{
    gfx_color(255, 255, 255);
    gfx_line(x, y, x + size, y);
    gfx_line(x + size, y, x + size, y + size);
    gfx_line(x + size, y + size, x, y + size);
    gfx_line(x, y + size, x, y);
    
}

main: function integer()  = 
{
    precision: integer = 100;
    
    xsize: integer = 500;
    
    ysize: integer = 500;
    
    x: integer = precision * xsize / 2;
    
    y: integer = precision * ysize / 2;
    
    vx: integer = precision * 3;
    
    vy: integer = precision * -5;
    
    deltat: integer = 100;
    
    gfx_open(xsize, ysize, "Bounce!");
    for (; ;  )
        
        {
            print "x: ";
            if (gfx_event_waiting())
                
                {
                    c: char;
                    
                    c = gfx_wait();
                    if (c == 'q')
                        return 0;
                        x = gfx_xpos() * precision;
                    y = gfx_ypos() * precision;
                    vx = 5 * precision;
                    
                }
                vy = vy + 1 * precision;
            if (x < 0 && vx < 0)
                
                {
                    vx = -9 * vx / 10;
                    
                }
                if (x > ( xsize * precision ) && vx > 0)
                
                {
                    vx = -9 * vx / 10;
                    
                }
                if (y > ( ysize * precision ) && vy > 0)
                
                {
                    vy = -9 * vy / 10;
                    
                }
                x = x + vx * deltat / precision;
            y = y + vy * deltat / precision;
            gfx_clear();
            draw_box(x / precision, y / precision, 25);
            gfx_flush();
            usleep(deltat * precision);
            
        }
        
}


*****RESOLVING*******

x resolves to (param)
y resolves to (param)
size resolves to (param)
gfx_color is bound to (global) gfx_color
gfx_line is bound to (global) gfx_line
x is bound to (L3) x
y is bound to (L3) y
x is bound to (L3) x
size is bound to (L3) size
y is bound to (L3) y
gfx_line is bound to (global) gfx_line
x is bound to (L3) x
size is bound to (L3) size
y is bound to (L3) y
x is bound to (L3) x
size is bound to (L3) size
y is bound to (L3) y
size is bound to (L3) size
gfx_line is bound to (global) gfx_line
x is bound to (L3) x
size is bound to (L3) size
y is bound to (L3) y
size is bound to (L3) size
x is bound to (L3) x
y is bound to (L3) y
size is bound to (L3) size
gfx_line is bound to (global) gfx_line
x is bound to (L3) x
y is bound to (L3) y
size is bound to (L3) size
x is bound to (L3) x
y is bound to (L3) y
precision is bound to (L3) precision
xsize is bound to (L3) xsize
precision is bound to (L3) precision
ysize is bound to (L3) ysize
precision is bound to (L3) precision
precision is bound to (L3) precision
gfx_open is bound to (global) gfx_open
xsize is bound to (L3) xsize
ysize is bound to (L3) ysize
vy is bound to (L4) vy
vx is bound to (L4) vx
y is bound to (L4) y
x is bound to (L4) x
gfx_event_waiting is bound to (global) gfx_event_waiting
c is bound to (L5) c
gfx_wait is bound to (global) gfx_wait
c is bound to (L5) c
x is bound to (L5) x
gfx_xpos is bound to (global) gfx_xpos
precision is bound to (L5) precision
y is bound to (L5) y
gfx_ypos is bound to (global) gfx_ypos
precision is bound to (L5) precision
vx is bound to (L5) vx
precision is bound to (L5) precision
vy is bound to (L4) vy
vy is bound to (L4) vy
precision is bound to (L4) precision
x is bound to (L4) x
vx is bound to (L4) vx
vx is bound to (L5) vx
vx is bound to (L5) vx
x is bound to (L4) x
xsize is bound to (L4) xsize
precision is bound to (L4) precision
vx is bound to (L4) vx
vx is bound to (L5) vx
vx is bound to (L5) vx
y is bound to (L4) y
ysize is bound to (L4) ysize
precision is bound to (L4) precision
vy is bound to (L4) vy
vy is bound to (L5) vy
vy is bound to (L5) vy
x is bound to (L4) x
x is bound to (L4) x
vx is bound to (L4) vx
deltat is bound to (L4) deltat
precision is bound to (L4) precision
y is bound to (L4) y
y is bound to (L4) y
vy is bound to (L4) vy
deltat is bound to (L4) deltat
precision is bound to (L4) precision
gfx_clear is bound to (global) gfx_clear
draw_box is bound to (global) draw_box
x is bound to (L4) x
precision is bound to (L4) precision
y is bound to (L4) y
precision is bound to (L4) precision
gfx_flush is bound to (global) gfx_flush
usleep is bound to (global) usleep
deltat is bound to (L4) deltat
precision is bound to (L4) precision
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck
