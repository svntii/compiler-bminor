=====STUDENT TESTS=====
====Good Tests====
===[mygood0.bminor Input]===
/*


multi

line comments

*/
===[mygood0.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code

*****RESOLVING*******

	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood1.bminor Input]===
//simple declarations

x:integer;
x:integer = 0;
a:boolean = true;
main:function void () = {
    return 0;
}


===[mygood1.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer;
x: integer = 0;
a: boolean = true;
main: function void()  = 
{
    return 0;
    
}


*****RESOLVING*******

	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood2.bminor Input]===
a: auto = 10;
a: array [4] array [4] integer = {{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}};

//complex array

===[mygood2.bminor Output]===
TEST NOT PASSED


free(): double free detected in tcache 2

return code: -6


===[mygood3.bminor Input]===
val
:
function
void
()
=
{

return -1;
//weird funct
}
===[mygood3.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
val: function void()  = 
{
    return -1;
    
}


*****RESOLVING*******

	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood4.bminor Input]===
x:function void(x:function void) = {
    i:integer = 0;
    for(;;){
        print i;
    }
    x();
}
===[mygood4.bminor Output]===
TEST NOT PASSED



return code: -11


===[mygood5.bminor Input]===
double:function void (n:integer) = {
    int i = 0;
    for(i = 0; i < n; i = i + 1){
        i = i + i;
        print i + "\n";
    }

}
===[mygood5.bminor Output]===
TEST NOT PASSED

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mygood6.bminor Input]===
x:integer = 1;
f:integer = x;
c:integer = f = x;  

//double equal;
===[mygood6.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 1;
f: integer = x;
c: integer = f = x;

*****RESOLVING*******

x is bound to (global) x
f is bound to (global) f
x is bound to (global) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood7.bminor Input]===
//comment i dont know how to fix the dangling else

a:function void() = {
    x:integer = 10;
    if(x>1)
    {
        print "1";
    }

}


//last comment
===[mygood7.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
a: function void()  = 
{
    x: integer = 10;
    
    if (x > 1)
        
        {
            print "1";
            
        }
        
}


*****RESOLVING*******

x is bound to (L3) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood8.bminor Input]===
x:integer = 5;
c:char = 'A';
str:string = "hello";


// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	if(!((4*x^5 + 4) - 4 >= 1))
	{
		x = 6;
		
	}
}

// produces correct precedence of operations

x: function void() = {
	x:integer = 5;
	y:integer = 4;
	if(!((4*x^5 + 4) - 4 >= 1))
	{
		x = 6;
		
	}
}



===[mygood8.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 5;
c: char = 'A';
str: string = "hello";
main: function void()  = 
{
    x: integer = 5;
    
    y: integer = 4;
    
    if (!( ( 4 * x^5 + 4 ) - 4 >= 1 ))
        
        {
            x = 6;
            
        }
        
}

x: function void()  = 
{
    x: integer = 5;
    
    y: integer = 4;
    
    if (!( ( 4 * x^5 + 4 ) - 4 >= 1 ))
        
        {
            x = 6;
            
        }
        
}


*****RESOLVING*******

x is bound to (L3) x
x is bound to (L4) x
x is bound to (L3) x
x is bound to (L4) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[mygood9.bminor Input]===
// print something


x:function integer(i:function integer) = {
    return x;
}
===[mygood9.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: function integer(i: function integer)  = 
{
    return x;
    
}


*****RESOLVING*******

i resolves to (param)
x is bound to (global) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


====Bad Tests====
===[mybad0.bminor Input]===
print "hello world";
===[mybad0.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad1.bminor Input]===
print //comments inline ;
===[mybad1.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad2.bminor Input]===
// produces correct precedence of operations

main: function void() = {
	x:integer = 5;
	y:integer = 4;
	if(!((4*x^5 + 4) - 4 >= 1))
	{
		x = 6;
		
	}


    bad: function void() = {
        x:integer = 5;
        y:integer = 4;
        if(!((4*x^5 + 4) - 4 >= 1))
        {
            x = 6;
            
        }
    }
    //cant declare a function in a function

}

===[mybad2.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad3.bminor Input]===
if(a > b) if(d>c) return 0;
===[mybad3.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad4.bminor Input]===
a:function void() = {

    for(i=0;i<10,j<10;i++) { 

        print "bad for loop";   

    }


}
===[mybad4.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad5.bminor Input]===

main: function integer () = {
    puts: function void ( s: string );

	puts("hello world");
}
===[mybad5.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad6.bminor Input]===
x: boolean = false ? true ? false : false : true :true
===[mybad6.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad7.bminor Input]===
f : function void () = {
    print "example";
    
    else{
        print "where is my if";
    }

    }
===[mybad7.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad8.bminor Input]===
f : function void () = print "example";

//functions need to be surrondend by braces
===[mybad8.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[mybad9.bminor Input]===
x:integer = x();

x = if(5>10) return 4;
===[mybad9.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/*
Correct: The parameter name can vary as long as the type is the same.
*/

x: function integer(a:integer);

x: function integer(b:integer) = {
	return 0;
}

x: function integer(c:integer);

===[good1.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: function integer(a: integer) ;
x: function integer(b: integer)  = 
{
    return 0;
    
}

x: function integer(c: integer) ;

*****RESOLVING*******

resolve error: x is already definedb resolves to (param)
resolve error: x is already defined	Code Resolved


return code: 2


===[good10.bminor Input]===
/*
Correct: Testing invocation of external function.
*/

abs: function integer(n: integer);

digits: array [6] integer = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: integer = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[good10.bminor Output]===
TEST NOT PASSED

	Scan Successful
scan error: bad token: '
parse error: syntax error
Parse Unsuccessful


return code: 1


===[good2.bminor Input]===
/*
Correct: Test various nested definitions.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	print x;
}

===[good2.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
f: function void()  = 
{
    x: integer = 1;
    
    
    {
        print x;
        x: integer = x + 1;
        
        print x;
        
    }
    print x;
    
}


*****RESOLVING*******

x is bound to (L4) x
x is bound to (L4) x
x is bound to (L4) x
x is bound to (L3) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[good3.bminor Input]===
/*
Correct: Test various function return types.
*/

A: function boolean(x: integer, y: integer);
B: function integer(x: char);
C: function char(a: string);

main: function integer() = {
	i: integer;
	for (i = 0; i < 10; i++)
		if (i % 2 == 0)
			print i;
		else
			return i;

	if (A(B('d') - 1, 10)) {
		x: integer = 0;
		return 2 * B('c') + x;
	}

	return B(C("hello")) % 3;
}

===[good3.bminor Output]===
TEST NOT PASSED



return code: -11


===[good4.bminor Input]===
/*
Correct: Test combinations of boolean operators.
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -b;
	print c && d;
	print a + b * a - a ^ b /a;

	print a < b && d;
	print (a < b) || (c && d);
}

===[good4.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
func: function void(a: integer, b: integer, c: boolean, d: boolean)  = 
{
    print a - b;
    print c && d;
    print a + b * a - a^b / a;
    print a < b && d;
    print ( a < b ) || ( c && d );
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
c resolves to (param)
d resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
c is bound to (L3) c
d is bound to (L3) d
a is bound to (L3) a
b is bound to (L3) b
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
d is bound to (L3) d
a is bound to (L3) a
b is bound to (L3) b
c is bound to (L3) c
d is bound to (L3) d
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[good5.bminor Input]===
/*
Correct: Test array assignments.
*/

x:array [5] integer = {1,2,3,4,5};
y:array [5] array [5] integer;

main:function void () =
{
	y[1] = x;
	count:integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[good5.bminor Output]===
TEST NOT PASSED


free(): double free detected in tcache 2

return code: -6


===[good6.bminor Input]===
/*
Correct: Test assignment of array literals.
*/

main: function void (a: integer) = {
	x: array [1] boolean = {true};
	y: array [1] integer = {0};
	if (x[y[a]]) return;
}

===[good6.bminor Output]===
TEST NOT PASSED

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[good7.bminor Input]===
/*
Correct: Test if-expression and return-expression.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	if (!n) return 0; else return -m;

	print 10 * (-1 + m);
}

===[good7.bminor Output]===
TEST NOT PASSED



return code: -11


===[good8.bminor Input]===
/*
Correct: Boolean expression in several places.
*/

x: function integer(a:boolean) = {
	if (a) for (;a;) print a;
}

===[good8.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: function integer(a: boolean)  = 
{
    if (a)
        for (; a;  )
            print a;
            
}


*****RESOLVING*******

a resolves to (param)
a is bound to (L3) a
a is bound to (L3) a
a is bound to (L3) a
	Code Resolved

*****TYPECHECKING*******

type error: Dearest programmer, you must have INT; BOOLEAN; INT
you have type; boolean;
;a;
type error: Dearest programmer, you must have INT; BOOLEAN; INT
you have type; boolean;
;a;
	Code Typecheck


return code: 2


===[good9.bminor Input]===
/*
Correct: A program to plot a quadratic function. 
*/

/* Make use of atoi from the standard library */

atoi: function integer( s: string );

quadratic: function integer ( a: integer, b: integer, c: integer, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[good9.bminor Output]===
TEST NOT PASSED



return code: -11


===[good11.bminor Input]===
/*
Correct: Test ternary operator
*/

func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {
        
    print a < b ? c : d;
}
===[good11.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
func: function void(a: integer, b: integer, c: boolean, d: boolean)  = 
{
    print a < b ? c : d;
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
c resolves to (param)
d resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
c is bound to (L3) c
d is bound to (L3) d
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[good12.bminor Input]===
/*
Correct: Auto can correctly be used to infer types
*/

main: function integer() = {
	m: auto = 3;
	n: auto = 5;
    
    x: auto = m + n;

    print x;
}

===[good12.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
main: function integer()  = 
{
    m: auto = 3;
    
    n: auto = 5;
    
    x: auto = m + n;
    
    print x;
    
}


*****RESOLVING*******

m is bound to (L3) m
n is bound to (L3) n
x is bound to (L3) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/*
Incorrect: Mismatched types in forward declaration
*/

x: function integer(a:char);
x: function integer(a:integer) = {
	return 0;
}

===[bad1.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: function integer(a: char) ;
x: function integer(a: integer)  = 
{
    return 0;
    
}


*****RESOLVING*******

a resolves to (param)
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[bad10.bminor Input]===
/*
Incorrect: Several type errors throughout.
*/

abs: function string (n: integer);

digits: array [6] char = {
	14,
	8,
	6168,
	42,
	0,
	74546
};

main:function integer () = {
	digits[4] = -468;
	i: boolean = 0;
	for (; abs(digits[i]) == digits[i];) {
		print digits[i];
		i = i + 1;
		print ' ';
	}
	print '\n';

	return 0;
}

===[bad10.bminor Output]===
Success!

	Scan Successful
scan error: bad token: '
parse error: syntax error
Parse Unsuccessful


return code: 1


===[bad2.bminor Input]===
/*
Incorrect: Variable redefined within a scope.
*/

f: function void() = {
	x: integer = 1;
	{
		print x;
		x: integer = x + 1;
		print x;
	}
	x: integer = 2;
	print x;
}

===[bad2.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
f: function void()  = 
{
    x: integer = 1;
    
    
    {
        print x;
        x: integer = x + 1;
        
        print x;
        
    }
    x: integer = 2;
    
    print x;
    
}


*****RESOLVING*******

x is bound to (L4) x
x is bound to (L4) x
x is bound to (L4) x
x is bound to (L3) x
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[bad3.bminor Input]===
/*
Incorrect: Mismatched function return types.
*/

main: function void() = {
	return i;
}

func: function integer() = {
	return;
}

===[bad3.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[bad4.bminor Input]===
/*
Incorrect: Mismatched operators.
*/


func: function void(
		a: integer,
		b: integer,
		c: boolean,
		d: boolean
	) = {

	print a -c;
	print c * d;
	print a + b * a - a ^ b /d;

	print a < b && a;
	print (a < b) + (c && d);
}

===[bad4.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
func: function void(a: integer, b: integer, c: boolean, d: boolean)  = 
{
    print a - c;
    print c * d;
    print a + b * a - a^b / d;
    print a < b && a;
    print ( a < b ) + ( c && d );
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
c resolves to (param)
d resolves to (param)
a is bound to (L3) a
c is bound to (L3) c
c is bound to (L3) c
d is bound to (L3) d
a is bound to (L3) a
b is bound to (L3) b
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
d is bound to (L3) d
a is bound to (L3) a
b is bound to (L3) b
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
c is bound to (L3) c
d is bound to (L3) d
	Code Resolved

*****TYPECHECKING*******

error: Dearest programmer, you cannotsub a  integer (a ) to a  boolean (c )
multiply a  integer (a ) to a  boolean (c )
divide a  integer (a ) to a  boolean (c )
exponentiate a  integer (a ) to a  boolean (c )
modulo a  integer (a ) to a  boolean (c )
 && a  integer (a ) to a  boolean (c )
 || a  integer (a ) to a  boolean (c )
 compare a  integer (a ) to a  boolean (c )
error: Dearest programmer, you cannotmultiply a  boolean (c ) to a  boolean (d )
divide a  boolean (c ) to a  boolean (d )
exponentiate a  boolean (c ) to a  boolean (d )
modulo a  boolean (c ) to a  boolean (d )
 && a  boolean (c ) to a  boolean (d )
 || a  boolean (c ) to a  boolean (d )
 compare a  boolean (c ) to a  boolean (d )
error: Dearest programmer, you cannotdivide a  integer (a^b ) to a  boolean (d )
exponentiate a  integer (a^b ) to a  boolean (d )
modulo a  integer (a^b ) to a  boolean (d )
 && a  integer (a^b ) to a  boolean (d )
 || a  integer (a^b ) to a  boolean (d )
 compare a  integer (a^b ) to a  boolean (d )
error: Dearest programmer, you cannot && a  boolean (a < b ) to a  integer (a )
 || a  boolean (a < b ) to a  integer (a )
 compare a  boolean (a < b ) to a  integer (a )
error: Dearest programmer, you cannotadd a  boolean (( a < b ) ) to a  boolean (( c && d ) )
sub a  boolean (( a < b ) ) to a  boolean (( c && d ) )
multiply a  boolean (( a < b ) ) to a  boolean (( c && d ) )
divide a  boolean (( a < b ) ) to a  boolean (( c && d ) )
exponentiate a  boolean (( a < b ) ) to a  boolean (( c && d ) )
modulo a  boolean (( a < b ) ) to a  boolean (( c && d ) )
 && a  boolean (( a < b ) ) to a  boolean (( c && d ) )
 || a  boolean (( a < b ) ) to a  boolean (( c && d ) )
 compare a  boolean (( a < b ) ) to a  boolean (( c && d ) )
	Code Typecheck


return code: 0


===[bad6.bminor Input]===
/*
Incorrect: Cannot assign an array to an atomic type.
*/

main: function void () = {
	// array of one boolean != boolean
	x: array [1] boolean = {true};
	if (x) return;
}

===[bad6.bminor Output]===
Success!

	Scan Successful
parse error: syntax error
Parse Unsuccessful


return code: 1


===[bad7.bminor Input]===
/*
Incorrect: Improper operators on values.
*/

main: function integer() = {
	m: integer = 2;
	n: boolean = true;

	// wrong negation
	if (-n) return 0; else return !m;

	// arithmetic on boolean
	print 10 * (-1 + n);
}

===[bad7.bminor Output]===
Success!



return code: -11


===[bad8.bminor Input]===
/*
Incorrect: Cannot use an integer in place of a boolean.
*/

x: function integer(a:integer) = {
	if (a) return 10;
	for (;a;) print a;
}

===[bad8.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: function integer(a: integer)  = 
{
    if (a)
        return 10;
        for (; a;  )
        print a;
        
}


*****RESOLVING*******

a resolves to (param)
a is bound to (L3) a
a is bound to (L3) a
a is bound to (L3) a
	Code Resolved

*****TYPECHECKING*******

type error: Dearest programmer, you cannot evaluate a a (a ). Type must be boolean
 type error: Dearest programmer, you must have INT; BOOLEAN; INT
you have type; integer;
;a;
type error: Dearest programmer, you must have INT; BOOLEAN; INT
you have type; integer;
;a;
type error: Dearest programmer, you must have INT; BOOLEAN; INT
you have type; integer;
;a;
	Code Typecheck


return code: 4


===[bad9.bminor Input]===
/*
Incorrect: Several type mismatches throughout.
*/

/* Make use of atoi from the standard library */

atoi: function boolean ( s: string );

quadratic: function void ( a: char, b: string, c: boolean, x: integer ) = {
	return a*x*x + b*x + c*x;
}

main: function integer ( argc: integer, argv: array [] string ) =  {

      if(argc<3) {
          print "use: ", argv[0], "[a] [b] [c] [start] [end]\n";
      }

      a: integer = atoi(argv[0]);
      b: integer = atoi(argv[1]);
      c: integer = atoi(argv[2]);
      start: integer = atoi(argv[3]);
      end: integer = atoi(argv[4]);


      x: integer;
      
      for(x=start;x<end;x++) {
          print x, " ", quadratic(a,b,c,x), "\n";
      }

      return 0;
}

===[bad9.bminor Output]===
Success!



return code: -11


===[bad11.bminor Input]===
/*
Incorrect: An auto must eventually be assigned to something
*/

main: function integer() = {
	m: auto;
	n: auto = 5;
    
    // The m has not been set yet
    x: auto = m + n;

    print x;
}

===[bad11.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
main: function integer()  = 
{
    m: auto;
    
    n: auto = 5;
    
    x: auto = m + n;
    
    print x;
    
}


*****RESOLVING*******

m is bound to (L3) m
n is bound to (L3) n
x is bound to (L3) x
	Code Resolved

*****TYPECHECKING*******

error: Dearest programmer, you cannotadd a  auto (m ) to a  integer (n )
sub a  auto (m ) to a  integer (n )
multiply a  auto (m ) to a  integer (n )
divide a  auto (m ) to a  integer (n )
exponentiate a  auto (m ) to a  integer (n )
modulo a  auto (m ) to a  integer (n )
 && a  auto (m ) to a  integer (n )
 || a  auto (m ) to a  integer (n )
 compare a  auto (m ) to a  integer (n )
	Code Typecheck


return code: 0


===[bad5.bminor Input]===
/*
Incorrect: Cannot subscript a value which is not an array.
*/

main: function void() = {
	s : boolean = false;
	c : char = s[1];
	print c;
}

===[bad5.bminor Output]===
Success!



return code: -11


=====COMMON TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* Assign integer expression to local variable/ typechecking with function call. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x: integer = y * 10 + 15 - 4;
}
	


===[good1.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 5;
y: integer = 10;
main: function void()  = 
{
    x: integer = y * 10 + 15 - 4;
    
    
}


*****RESOLVING*******

y is bound to (global) y
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[good10.bminor Input]===
/* Test array of array assignments. */

x: array [5] integer = {1,2,3,4,5};
y: array [5] array [5] integer;

main: function void () =
{
	y[1] = x;
	count: integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[good10.bminor Output]===
TEST NOT PASSED


free(): double free detected in tcache 2

return code: -6


===[good2.bminor Input]===
/* Assign an integer expression to local variable. */

x: integer = 5;
y: integer = 10;

test: function integer();

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function integer () =
{
	return 5;
}
	


===[good2.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 5;
y: integer = 10;
test: function integer() ;
main: function void()  = 
{
    x: integer = y * 10 + 15 - test();
    
    
}

test: function integer()  = 
{
    return 5;
    
}


*****RESOLVING*******

y is bound to (global) y
test is bound to (global) test
resolve error: test is already defined	Code Resolved


return code: 1


===[good3.bminor Input]===
/* Test name resolution at multiple scope levels. */

x: integer = 5;
y: integer = 10;

main: function void () =
{
	x: integer = 5;
	y: integer = 10;
	{
		x: integer = 5;
		y: integer = 10;
		{
			x: char = 'a';
			y: integer = 10;
		}
		y = x + y;
	}
}
	


===[good3.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 5;
y: integer = 10;
main: function void()  = 
{
    x: integer = 5;
    
    y: integer = 10;
    
    
    {
        x: integer = 5;
        
        y: integer = 10;
        
        
        {
            x: char = 'a';
            
            y: integer = 10;
            
            
        }
        y = x + y;
        
    }
    
}


*****RESOLVING*******

y is bound to (L4) y
x is bound to (L4) x
y is bound to (L4) y
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[good4.bminor Input]===
/* Use character types in various contexts. */

charFxn: function char(x: char)=
{
	if(x == 'a')
	{
		return 'z';
	}
}

main: function void ()=
{
	c: char;

	if('a' == charFxn('c'))
	{
		print "unreachable";
	}
	if('a' != 'a')
	{
		print "unreachable";
	}
	if(c == 'a')
	{
		print "unreachable";
	}
}


===[good4.bminor Output]===
TEST NOT PASSED



return code: -11


===[good5.bminor Input]===
// Test integer comparisons and functions. */

intFxn: function integer(c:char);

glob: integer = 1;

main: function void ()=
{
	c: integer;
	if(6 == intFxn('c'))
	{
		print "unreachable";
	}
	if(5 >= 5)
	{
		print "unreachable";
	}
	if(c > 5)
	{
		print "unreachable";
	}
	if(c >= 5)
	{
		print "unreachable";
	}
	if(intFxn('a') <= 5)
	{
		print "reachable";
	}
	if(glob < 5)
	{
		print "reachable";
	}
}

intFxn: function integer(c: char)=
{
	if(c == 'a')
	{
		return 5;
	}
	return 0;
}


===[good5.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
intFxn: function integer(c: char) ;
glob: integer = 1;
main: function void()  = 
{
    c: integer;
    
    if (6 == intFxn('c'))
        
        {
            print "unreachable";
            
        }
        if (5 >= 5)
        
        {
            print "unreachable";
            
        }
        if (c > 5)
        
        {
            print "unreachable";
            
        }
        if (c >= 5)
        
        {
            print "unreachable";
            
        }
        if (intFxn('a') <= 5)
        
        {
            print "reachable";
            
        }
        if (glob < 5)
        
        {
            print "reachable";
            
        }
        
}

intFxn: function integer(c: char)  = 
{
    if (c == 'a')
        
        {
            return 5;
            
        }
        return 0;
    
}


*****RESOLVING*******

intFxn is bound to (global) intFxn
c is bound to (L3) c
c is bound to (L3) c
intFxn is bound to (global) intFxn
glob is bound to (global) glob
resolve error: intFxn is already definedc resolves to (param)
c is bound to (L3) c
	Code Resolved


return code: 1


===[good6.bminor Input]===
/* Test function declarations without prototypes. */

test1: function integer (a:integer, b:integer)=
{
	return a + b;
}

test2: function boolean (a:integer, b:integer)=
{
	return a < b;
}

test3: function char (a:integer)=
{
	if (a > 5) {
		return 'x';
	} else {
		return 'y';
	}
}

main:function void ()=
{
	print test1(10,20), test2(30,40), test3(10), "\n";
}


===[good6.bminor Output]===
TEST NOT PASSED


free(): double free detected in tcache 2

return code: -6


===[good7.bminor Input]===
/* Test function invocations with prototypes. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);
test3:function string (a:integer);

main:function void ()=
{
	x:integer = test1(5, 6);
	test2(5, 6);
	print test3(7);
}

test1:function integer (a:integer, b:integer)=
{
	return a + b;
}

test2:function boolean (a:integer, b:integer)=
{
	return a==b;
}

test3:function string (a:integer)=
{
	if (test1(1, 5) > 6)
	{
		return "hello world";
	}
}

===[good7.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
test1: function integer(a: integer, b: integer) ;
test2: function boolean(a: integer, b: integer) ;
test3: function string(a: integer) ;
main: function void()  = 
{
    x: integer = test1(5, 6);
    
    test2(5, 6);
    print test3(7);
    
}

test1: function integer(a: integer, b: integer)  = 
{
    return a + b;
    
}

test2: function boolean(a: integer, b: integer)  = 
{
    return a == b;
    
}

test3: function string(a: integer)  = 
{
    if (test1(1, 5) > 6)
        
        {
            return "hello world";
            
        }
        
}


*****RESOLVING*******

test1 is bound to (global) test1
test2 is bound to (global) test2
test3 is bound to (global) test3
resolve error: test1 is already defineda resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
resolve error: test2 is already defineda resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
resolve error: test3 is already defineda resolves to (param)
test1 is bound to (global) test1
	Code Resolved


return code: 3


===[good8.bminor Input]===
/* Update one element of an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x[4] = 4;
}

===[good8.bminor Output]===
TEST NOT PASSED


free(): double free detected in tcache 2

return code: -6


===[good9.bminor Input]===
/* Update array with values from function calls. */

x: array [5] integer = {1,2,3,4,5};
intFxn: function integer ();

main: function void () =
{
	x[4] = intFxn();
	x[intFxn()] = 4;
	
}
intFxn: function integer () =
{
	return 3;
}

===[good9.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: array[] integer = { 1, 2, 3, 4, 5 };
intFxn: function integer() ;
main: function void()  = 
{
    x[4] = intFxn();
    x[intFxn()] = 4;
    
}

intFxn: function integer()  = 
{
    return 3;
    
}


*****RESOLVING*******

x is bound to (global) x
intFxn is bound to (global) intFxn
x is bound to (global) x
intFxn is bound to (global) intFxn
resolve error: intFxn is already defined	Code Resolved


return code: 1


====Bad Tests====
===[bad1.bminor Input]===
/* Cannot assign a character to a global integer. */

x: integer = 'c';


===[bad1.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 'c';

*****RESOLVING*******

	Code Resolved

*****TYPECHECKING*******

type error: Dearest programmer, you cannot assign char ('c') to integer (x) 
	Code Typecheck


return code: 1


===[bad10.bminor Input]===
/* Cannot assign an array-of-arrays to an array. */

x:array [5] integer;
y:array [5] array [5] integer;

main:function void () =
{
	y = x;
}

===[bad10.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: array[] integer;
y: array[] array[] integer;
main: function void()  = 
{
    y = x;
    
}


*****RESOLVING*******

y is bound to (global) y
x is bound to (global) x
	Code Resolved

*****TYPECHECKING*******

error: Dearest programmer, you cannot	Code Typecheck


return code: 0


===[bad2.bminor Input]===
/* Cannot use a function without declaring it. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function char () =
{
	return 'a';
}
	


===[bad2.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 5;
y: integer = 10;
main: function void()  = 
{
    x: integer = y * 10 + 15 - test();
    
    
}

test: function char()  = 
{
    return 'a';
    
}


*****RESOLVING*******

y is bound to (global) y
resolve error: test is not defined
	Code Resolved


return code: 1


===[bad3.bminor Input]===
/* Cannot use a variable x that is not defined in the current scope. */

y: integer = 10;

main: function void ()=
{
	y: integer = 10;
	{
		
		y: integer = 10;
		{
			
			x: integer = 5;
			y: integer = 10;
		}
		y = x + y;
	}
}
	


===[bad3.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
y: integer = 10;
main: function void()  = 
{
    y: integer = 10;
    
    
    {
        y: integer = 10;
        
        
        {
            x: integer = 5;
            
            y: integer = 10;
            
            
        }
        y = x + y;
        
    }
    
}


*****RESOLVING*******

y is bound to (L4) y
resolve error: x is not defined
y is bound to (L4) y
	Code Resolved


return code: 1


===[bad4.bminor Input]===
/* Type of return statement must match return type of function. */

main: function integer ()=
{
	return 'c';
}

===[bad4.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
main: function integer()  = 
{
    return 'c';
    
}


*****RESOLVING*******

	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[bad5.bminor Input]===
/* Check for invalid type inside of boolean expression. */

y:integer = 10;

main: function void () =
{
	if(y > 5 && 'a' || true)
	{
		print "ok";
	}
}
	


===[bad5.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
y: integer = 10;
main: function void()  = 
{
    if (y > 5 && 'a' || true)
        
        {
            print "ok";
            
        }
        
}


*****RESOLVING*******

y is bound to (global) y
	Code Resolved

*****TYPECHECKING*******

error: Dearest programmer, you cannot && a  boolean (y > 5 ) to a  char ('a' )
 || a  boolean (y > 5 ) to a  char ('a' )
 compare a  boolean (y > 5 ) to a  char ('a' )
	Code Typecheck


return code: 0


===[bad6.bminor Input]===
/* Function definitions must match prior prototypes. */

test1: function integer (a:integer, b:integer);
test2: function boolean (a:integer, b:integer);
test3: function string (a:integer);

main: function void () =
{
	str: string = "hi";
}

/* Parameter type differs from prototype. */

test3: function string (a:boolean) =
{
	return "hello!";
}

/* Return type differs from prototype. */

test2: function integer (a:integer, b:integer) =
{ 
	return a + b;
}


===[bad6.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
test1: function integer(a: integer, b: integer) ;
test2: function boolean(a: integer, b: integer) ;
test3: function string(a: integer) ;
main: function void()  = 
{
    str: string = "hi";
    
    
}

test3: function string(a: boolean)  = 
{
    return "hello!";
    
}

test2: function integer(a: integer, b: integer)  = 
{
    return a + b;
    
}


*****RESOLVING*******

a resolves to (param)
a resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
	Code Resolved

*****TYPECHECKING*******

	Code Typecheck


return code: 0


===[bad7.bminor Input]===
/* Function arguments must match formal parameter types. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);

main: function void () =
{
	x:integer = test2(5, 6);
	test2(5,6);
	print test2(11);
}

test2: function boolean (a:integer, b:integer) =
{
	return a==b;
}

===[bad7.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
test1: function integer(a: integer, b: integer) ;
test2: function boolean(a: integer, b: integer) ;
main: function void()  = 
{
    x: integer = test2(5, 6);
    
    test2(5, 6);
    print test2(11);
    
}

test2: function boolean(a: integer, b: integer)  = 
{
    return a == b;
    
}


*****RESOLVING*******

test2 is bound to (global) test2
test2 is bound to (global) test2
test2 is bound to (global) test2
resolve error: test2 is already defineda resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
	Code Resolved


return code: 1


===[bad8.bminor Input]===
/* Cannot assign a scalar value to an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x = 4;
}

===[bad8.bminor Output]===
Success!


free(): double free detected in tcache 2

return code: -6


===[bad9.bminor Input]===
/* Cannot index an array with a boolean. */

x:array [5] integer = {1,2,3,4,5};

main: function void () =
{
	x[true] = intFxn();
}

intFxn: function integer ()=
{
	return 3;
}

===[bad9.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: array[] integer = { 1, 2, 3, 4, 5 };
main: function void()  = 
{
    x[true] = intFxn();
    
}

intFxn: function integer()  = 
{
    return 3;
    
}


*****RESOLVING*******

x is bound to (global) x
resolve error: intFxn is not defined
	Code Resolved


return code: 1


===== SUMMARIZED TYPECHECKER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 7,
      "incorrect": 3
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 4,
      "incorrect": 8
    },
    "Bad": {
      "correct": 7,
      "incorrect": 4
    }
  },
  "common_tests": {
    "Good": {
      "correct": 2,
      "incorrect": 8
    },
    "Bad": {
      "correct": 6,
      "incorrect": 4
    }
  }
}
