=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* Correct: x used but not defined. */

x: integer = 10;

===[good1.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;

*****RESOLVING*******

	Code Resolved


return code: 0


===[good10.bminor Input]===
/* Correct: Many variables to resolve. */

D: function integer() = {
        d1: integer = 5;
        d2: integer = d1 + 1; //6
        {
                d3: integer = 9;
                d2: integer = d3 + d1 - 3; //11
                d4: integer = -1;
                d2 = d2 + d3; //20
                print d2 - d4, "\n";
        }
        d4: integer = 16;
        print d2 - d4, '\n';
        {
                d4: integer = -2;
                d3: integer = 1000;
                print d3 + 10;
                print "\n";
                print d4;
                print '\n';
        }
        print d4;
        return 3;
}

main: function integer () = {
        return D();
}

===[good10.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
D: function integer()  = 
{
    d1: integer = 5;
    
    d2: integer = d1 + 1;
    
    
    {
        d3: integer = 9;
        
        d2: integer = d3 + d1 - 3;
        
        d4: integer = -1;
        
        d2 = d2 + d3;
        print d2 - "\n";
        
    }
    d4: integer = 16;
    
    print d2 - '\';
    
    {
        d4: integer = -2;
        
        d3: integer = 1000;
        
        print d3 + 10;
        print "\n";
        print d4;
        print '\';
        
    }
    print d4;
    return 3;
    
}

main: function integer()  = 
{
    return D();
    
}


*****RESOLVING*******

d1 is bound to (L3) d1
d3 is bound to (L4) d3
d1 is bound to (L4) d1
d2 is bound to (L4) d2
d2 is bound to (L4) d2
d3 is bound to (L4) d3
d2 is bound to (L4) d2
d2 is bound to (L3) d2
d3 is bound to (L4) d3
d4 is bound to (L4) d4
d4 is bound to (L3) d4
D is bound to (global) D
	Code Resolved


return code: 0


===[good2.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void () = {
     x: integer = 20;
     print x, "\n";
}


===[good2.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void()  = 
{
    x: integer = 20;
    
    print x;
    
}


*****RESOLVING*******

x is bound to (L3) x
	Code Resolved


return code: 0


===[good3.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     x: integer = 20;
     if(a<b) {
          x: integer = 30;
          print x, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good3.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    x: integer = 20;
    
    if (a < b)
        
        {
            x: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
x is bound to (L4) x
	Code Resolved


return code: 0


===[good4.bminor Input]===
/* Correct: Accessing names in different scopes. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }

}


===[good4.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
	Code Resolved


return code: 0


===[good5.bminor Input]===
/* Correct: f is called multiple times from main. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}



===[good5.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = a * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}

main: function integer(argc: integer, argv: array[] string)  = 
{
    f(10, 20);
    f(40, 30);
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
argc resolves to (param)
argv resolves to (param)
f is bound to (global) f
f is bound to (global) f
	Code Resolved


return code: 0


===[good6.bminor Input]===
/* Correct: f is prototyped, then defined, then called. */

x: integer = 10;

f: function void ( a: integer, b: integer );

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}




===[good6.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer) ;
f: function void(a: integer, b: integer)  = 
{
    y: integer = a * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}

main: function integer(argc: integer, argv: array[] string)  = 
{
    f(10, 20);
    f(40, 30);
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
argc resolves to (param)
argv resolves to (param)
f is bound to (global) f
f is bound to (global) f
	Code Resolved


return code: 0


===[good7.bminor Input]===
/* Correct: f is prototyped, then called, then defined. */

x: integer = 10;

f: function void ( a: integer, b: integer );

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good7.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer) ;
main: function integer(argc: integer, argv: array[] string)  = 
{
    f(10, 20);
    f(40, 30);
    
}

f: function void(a: integer, b: integer)  = 
{
    y: integer = a * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}


*****RESOLVING*******

argc resolves to (param)
argv resolves to (param)
f is bound to (global) f
f is bound to (global) f
a resolves to (param)
b resolves to (param)
a is bound to (L3) a
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
	Code Resolved


return code: 0


===[good8.bminor Input]===
/* Correct: Resolver should work all the way down the tree. */

f: function void ( n:integer, s: string ) =
{
	i:integer;

	for(i=0;i<n;i++) { 
		if( i%2 == 0 ) {
			print i, "is even\n";
		} else {
			print i, "is odd\n";
		}
	}

	/* We can open a new scope with braces */
	{
		i: integer;
		j: integer;
		for(i=0;i<n;i++) {
			for(j=0;j<n;j++) {
				print i, ":", j, " -> ", i*j, " ", s, "\n";
			}
		}
	}
}

===[good8.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
f: function void(n: integer, s: string)  = 
{
    i: integer;
    
    for (i = 0; i < n; i++ )
        
        {
            if (i % 2 == 0)
                
                {
                    print i;
                    
                }
                
            else
                
                {
                    print i;
                    
                }
                
        }
        
    {
        i: integer;
        
        j: integer;
        
        for (i = 0; i < n; i++ )
            
            {
                for (j = 0; j < n; j++ )
                    
                    {
                        print i;
                        
                    }
                    
            }
            
    }
    
}


*****RESOLVING*******

n resolves to (param)
s resolves to (param)
i is bound to (L3) i
i is bound to (L3) i
n is bound to (L3) n
i is bound to (L3) i
i is bound to (L4) i
i is bound to (L5) i
i is bound to (L4) i
i is bound to (L4) i
n is bound to (L4) n
i is bound to (L4) i
j is bound to (L5) j
j is bound to (L5) j
n is bound to (L5) n
j is bound to (L5) j
i is bound to (L6) i
s is bound to (L6) s
j is bound to (L6) j
i is bound to (L6) i
	Code Resolved


return code: 0


===[good9.bminor Input]===
/* Correct: Different functions can define variables with same params and locals. */

x: integer = 10;

f: function integer ( x: integer ) =
{
	y: integer = 20;
	return x*y;
}

g: function void ( x: integer ) =
{
	y: integer = 30;
	return x*y;
}

main: function integer ( argc: integer, argv: array [] string ) =
{
	return f(x) + g(x);
}

===[good9.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function integer(x: integer)  = 
{
    y: integer = 20;
    
    return x * y;
    
}

g: function void(x: integer)  = 
{
    y: integer = 30;
    
    return x * y;
    
}

main: function integer(argc: integer, argv: array[] string)  = 
{
    return f(x) + g(x);
    
}


*****RESOLVING*******

x resolves to (param)
x is bound to (L3) x
y is bound to (L3) y
x resolves to (param)
x is bound to (L3) x
y is bound to (L3) y
argc resolves to (param)
argv resolves to (param)
f is bound to (global) f
x is bound to (global) x
g is bound to (global) g
x is bound to (global) x
	Code Resolved


return code: 0


===[good11.bminor Input]===
/* Correct: Ternary works properly. */

E: function integer() = {
        e0: integer = 4;
        e1: integer = 9;
        e2: integer = 5;
        e3: integer = 3;
        e4: integer = e1 > e3 ? e0 : e2;
        return e4;
}

main: function integer () = {
        return E();
}

===[good11.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
E: function integer()  = 
{
    e0: integer = 4;
    
    e1: integer = 9;
    
    e2: integer = 5;
    
    e3: integer = 3;
    
    e4: integer = e1 > e3 ? e0 : e2;
    
    return e4;
    
}

main: function integer()  = 
{
    return E();
    
}


*****RESOLVING*******

e1 is bound to (L3) e1
e3 is bound to (L3) e3
e0 is bound to (L3) e0
e2 is bound to (L3) e2
e4 is bound to (L3) e4
E is bound to (global) E
	Code Resolved


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* Error: name already used in the global scope. */
x: integer = 10;
x: integer = 20;


===[bad1.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
x: integer = 20;

*****RESOLVING*******

	Code Resolved


return code: 0


===[bad10.bminor Input]===
/* Error: Function has the same name as a declared variable. */

str: string = "hello";

str: function string ( s: string ) = 
{
	return "goodbye";
}


===[bad10.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
str: string = "hello";
str: function string(s: string)  = 
{
    return "goodbye";
    
}


*****RESOLVING*******

s resolves to (param)
	Code Resolved


return code: 0


===[bad2.bminor Input]===
/* Error: Variable z went out of scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad2.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print "a<b\n";
            
        }
        print x;
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
a is bound to (L3) a
b is bound to (L3) b
resolve error: z is not defined
y is bound to (L3) y
x is bound to (global) x
	Code Resolved


return code: 1


===[bad3.bminor Input]===
/* Error: Cannot refer to variable y in its own definition. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     } else {
          print "a>=b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad3.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = y * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print "a<b\n";
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        print x;
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
resolve error: y is not defined
a is bound to (L3) a
b is bound to (L3) b
resolve error: z is not defined
y is bound to (L3) y
x is bound to (global) x
	Code Resolved


return code: 2


===[bad4.bminor Input]===
/* Error: f has multiple definitions. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

f: function string ( s: string ) = {
    print "hello";
    return "goodbye";
}


===[bad4.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = y * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}

f: function string(s: string)  = 
{
    print "hello";
    return "goodbye";
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
resolve error: y is not defined
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
s resolves to (param)
	Code Resolved


return code: 1


===[bad5.bminor Input]===
/* Error: f is called prior to definition. */

x: integer = 10;

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[bad5.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
main: function integer(argc: integer, argv: array[] string)  = 
{
    f(10, 20);
    f(40, 30);
    
}

f: function void(a: integer, b: integer)  = 
{
    y: integer = y * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}


*****RESOLVING*******

argc resolves to (param)
argv resolves to (param)
resolve error: f is not defined
resolve error: f is not defined
a resolves to (param)
b resolves to (param)
resolve error: y is not defined
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
	Code Resolved


return code: 3


===[bad6.bminor Input]===
/* Error: g is not defined. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     g(40,30);
}


===[bad6.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
x: integer = 10;
f: function void(a: integer, b: integer)  = 
{
    y: integer = y * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}

main: function integer(argc: integer, argv: array[] string)  = 
{
    f(10, 20);
    g(40, 30);
    
}


*****RESOLVING*******

a resolves to (param)
b resolves to (param)
resolve error: y is not defined
a is bound to (L3) a
b is bound to (L3) b
z is bound to (L4) z
y is bound to (L4) y
x is bound to (global) x
argc resolves to (param)
argv resolves to (param)
f is bound to (global) f
resolve error: g is not defined
	Code Resolved


return code: 2


===[bad7.bminor Input]===
/* Error: Two parameters have the same name */
/* Also, b is not defined. */

f: function void ( a: integer, a: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

===[bad7.bminor Output]===
Success!

	Scan Successful
	Parse Successful
	Reformatted Code
f: function void(a: integer, a: integer)  = 
{
    y: integer = y * 20;
    
    if (a < b)
        
        {
            z: integer = 30;
            
            print x;
            
        }
        
    else
        
        {
            print "a>=b\n";
            
        }
        
}


*****RESOLVING*******

a resolves to (param)
resolve error: a is already defined (param)
resolve error: y is not defined
a is bound to (L3) a
resolve error: b is not defined
z is bound to (L4) z
y is bound to (L4) y
resolve error: x is not defined
	Code Resolved


return code: 4


===[bad8.bminor Input]===
/* Error: x not defined, deep down in the expression. */

a: integer;

f: function integer ( b: integer ) =
{
	c: integer;
	for(c=0;c<b;c++) {
		if(a<b) {
			print a + b * (c / (a+x)), "\n"; 
		}
	}
	return b;
}

===[bad8.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
a: integer;
f: function integer(b: integer)  = 
{
    c: integer;
    
    for (c = 0; c < b; c++ )
        
        {
            if (a < b)
                
                {
                    print a + "\n";
                    
                }
                
        }
        return b;
    
}


*****RESOLVING*******

b resolves to (param)
c is bound to (L3) c
c is bound to (L3) c
b is bound to (L3) b
c is bound to (L3) c
a is bound to (global) a
b is bound to (L4) b
a is bound to (global) a
b is bound to (L3) b
	Code Resolved


return code: 0


===[bad9.bminor Input]===
/* Error: x redefined after several intervening scopes. */

a: integer;

f: function integer ( b: integer ) =
{
	x: integer = 20;
	{
		i: integer;
		for(i=0;i<x;i++) print i;
	}
	{
		j: integer;
		for(j=0;j<x;j++) print j;
	}
	x: integer = 30;

	return x;
}

===[bad9.bminor Output]===
TEST NOT PASSED

	Scan Successful
	Parse Successful
	Reformatted Code
a: integer;
f: function integer(b: integer)  = 
{
    x: integer = 20;
    
    
    {
        i: integer;
        
        for (i = 0; i < x; i++ )
            print i;
            
    }
    
    {
        j: integer;
        
        for (j = 0; j < x; j++ )
            print j;
            
    }
    x: integer = 30;
    
    return x;
    
}


*****RESOLVING*******

b resolves to (param)
i is bound to (L4) i
i is bound to (L4) i
x is bound to (L4) x
i is bound to (L4) i
i is bound to (L4) i
j is bound to (L4) j
j is bound to (L4) j
x is bound to (L4) x
j is bound to (L4) j
j is bound to (L4) j
x is bound to (L3) x
	Code Resolved


return code: 0


===== SUMMARIZED RESOLVER RESULTS =====
{
  "hidden_tests": {
    "Good": {
      "correct": 11,
      "incorrect": 0
    },
    "Bad": {
      "correct": 6,
      "incorrect": 4
    }
  }
}
