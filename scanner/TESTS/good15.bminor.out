IDENTIFIER		text: intFunction
COLON		text: :
KEYWORD		text: function
KEYWORD		text: integer
PARL		text: (
IDENTIFIER		text: intVar
COLON		text: :
KEYWORD		text: integer
COMMA		text: ,
IDENTIFIER		text: boolVar
COLON		text: :
KEYWORD		text: boolean
PARR		text: )
CRLL		text: {
KEYWORD		text: if
PARL		text: (
IDENTIFIER		text: boolVar
PARR		text: )
CRLL		text: {
IDENTIFIER		text: intVar
ASSIGNMENT		text: =
IDENTIFIER		text: intVar
MULTIPLY		text: *
KEYWORD		text: 2
SEMICOLON		text: ;
CRLR		text: }
KEYWORD		text: return
IDENTIFIER		text: intVar
SEMICOLON		text: ;
CRLR		text: }
COMMENT		text: // finds the largest value in the array
IDENTIFIER		text: getLargest
COLON		text: :
KEYWORD		text: function
KEYWORD		text: integer
PARL		text: (
IDENTIFIER		text: intArrVar
COLON		text: :
KEYWORD		text: array
BRACKL		text: [
BRACKR		text: ]
KEYWORD		text: integer
COMMA		text: ,
IDENTIFIER		text: int
IDENTIFIER		text: len
PARR		text: )
ASSIGNMENT		text: =
CRLL		text: {
IDENTIFIER		text: largest
COLON		text: :
KEYWORD		text: integer
ASSIGNMENT		text: =
KEYWORD		text: 0
SEMICOLON		text: ;
IDENTIFIER		text: x
COLON		text: :
KEYWORD		text: integer
SEMICOLON		text: ;
KEYWORD		text: for
PARL		text: (
IDENTIFIER		text: x
ASSIGNMENT		text: =
KEYWORD		text: 0
SEMICOLON		text: ;
IDENTIFIER		text: x
LESS_THAN		text: <
IDENTIFIER		text: len
SEMICOLON		text: ;
IDENTIFIER		text: x
POS_INCREMENT		text: ++
PARR		text: )
CRLL		text: {
KEYWORD		text: if
PARL		text: (
IDENTIFIER		text: intArrVar
BRACKL		text: [
IDENTIFIER		text: x
BRACKR		text: ]
GREATER_THAN		text: >
IDENTIFIER		text: largest
PARR		text: )
CRLL		text: {
IDENTIFIER		text: largest
ASSIGNMENT		text: =
IDENTIFIER		text: intArrVar
BRACKL		text: [
IDENTIFIER		text: x
BRACKR		text: ]
SEMICOLON		text: ;
CRLR		text: }
CRLR		text: }
KEYWORD		text: return
IDENTIFIER		text: largest
SEMICOLON		text: ;
CRLR		text: }
IDENTIFIER		text: main
COLON		text: :
KEYWORD		text: function
KEYWORD		text: integer
PARL		text: (
IDENTIFIER		text: argc
COLON		text: :
KEYWORD		text: integer
COMMA		text: ,
IDENTIFIER		text: argv
COLON		text: :
KEYWORD		text: array
BRACKL		text: [
BRACKR		text: ]
KEYWORD		text: string
PARR		text: )
ASSIGNMENT		text: =
CRLL		text: {
IDENTIFIER		text: b
COLON		text: :
KEYWORD		text: array
BRACKL		text: [
KEYWORD		text: 10
BRACKR		text: ]
KEYWORD		text: integer
ASSIGNMENT		text: =
CRLL		text: {
KEYWORD		text: 0
COMMA		text: ,
KEYWORD		text: 1
COMMA		text: ,
KEYWORD		text: 2
COMMA		text: ,
KEYWORD		text: 3
COMMA		text: ,
KEYWORD		text: 4
COMMA		text: ,
KEYWORD		text: 5
CRLR		text: }
SEMICOLON		text: ;
IDENTIFIER		text: b
BRACKL		text: [
KEYWORD		text: 4
BRACKR		text: ]
ASSIGNMENT		text: =
KEYWORD		text: 6
SEMICOLON		text: ;
IDENTIFIER		text: i
COLON		text: :
KEYWORD		text: integer
SEMICOLON		text: ;
IDENTIFIER		text: z
COLON		text: :
KEYWORD		text: integer
ASSIGNMENT		text: =
IDENTIFIER		text: intFunction
PARL		text: (
IDENTIFIER		text: i
COMMA		text: ,
KEYWORD		text: true
PARR		text: )
SEMICOLON		text: ;
KEYWORD		text: print
IDENTIFIER		text: intArrFunction
PARL		text: (
IDENTIFIER		text: v
COMMA		text: ,
IDENTIFIER		text: z
PARR		text: )
SEMICOLON		text: ;
CRLR		text: }
